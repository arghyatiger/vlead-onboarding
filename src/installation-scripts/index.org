#+TITLE: Setup GIT, and Emacs as IDE  
#+AUTHOR: VLEAD
#+DATE: [2015-10-27 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil


The setup of /emacs/ as an IDE and /git/ is automated through execution of
scripts.

* Installation of Git
** Proxy Configuration
   - If your network has any proxy settings to access internet please ensure that they are
     set to =http_proxy= and =https_proxy= variables
 #+BEGIN_SRC shell :tangle ../src/configure.sh :eval no
 #!/bin/bash
http_proxy=yourproxy
httsp_proxy=yourproxy
#+END_SRC
** Updating system
   - Before installing =git= package please update =apt= repository from where
     =git= will be installed.
     and check whether updating =apt= repository is successfully done or not if
     not through an error.
     #+BEGIN_SRC shell :tangle ../src/install_git.sh :eval no
echo "######### Updating System #########"
sudo apt-get -y update
if [ $? -eq 0 ]
then
    echo "########### Successfully updated ###########"
else
    echo "########### Erro in updating system ###########"
    exit
fi
#+END_SRC
     
** Installing Git
   - Once updating system is done successfully install =git= version control
     using =apt= command and check whether successfully installed or not.
   #+BEGIN_SRC shell :tangle ../src/install_git.sh :eval no
echo "######### Installing Git #########"
sudo apt-get -y install git

if [ $? -eq 0 ]
then
    echo "########### Git is installed successfully ##########"
else
    echo "########### Erro in installing Git ###########"
    exit 1
fi
#+END_SRC

** Git configuration
   - To start with =git= version control please provide your
     =username= and =email= of your =github= account so that it will tack all
     the changes that you have made to project.
 #+BEGIN_SRC shell :tangle ../src/configure.sh :eval no
git_username=username
git_email=email
 #+END_SRC
#+BEGIN_SRC shell :tangle ../src/install_git.sh :eval no
git config --global user.name $git_username
git config --global user.email $git_email

#+END_SRC
** Configure =bash= to detect =git= branch
   - Configure bash terminal to display the working branch of the
     repository. This is useful when repository has multiple branches.
#+BEGIN_SRC shell :tangle ../src/install_git.sh :eval no
echo "parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}" >> ~/.bashrc
echo 'export PS1="\u@\h \W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ " ' >> ~/.bashrc
#+END_SRC 
   
* Installation of Emacs
** Install dependencies
   Before installing =emacs24.5.10= version we need to install all required
   dependency packages. They are =build-dep= and =checkinstall=. For more info please visit [[http://askubuntu.com/questions/701448/how-to-install-the-latest-emacs-in-12-04][here]]
#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
#!/bin/bash
sudo apt-get -y build-dep emacs24
if [ $? -eq 0 ]
then
    echo "######### Dependency build-dep installed ###########"
else
    echo "######## Erro in installing build-dep dependency #####"
    exit 1
fi
#+END_SRC
** Install /pylint/ package
   - Pylint is a package which uses Python's PEP8 style to format the python code for more
     info visit [[http://liuluheng.github.io/wiki/public_html/Python/flycheck-pylint-emacs-with-python.html][here]]

#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
sudo apt-get -y install pylint
if [ $? -eq 0 ]
then
    echo "######### Dependency pylint is installed ###########"
else
    echo "######## Erro in installing pylint  dependency #####"
    
fi
#+END_SRC
** Install /python-virtualenv/ package
   - /python-virtualenv/ is a packages which is allowed to create
     virtual environments of different versions of python
#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
sudo apt-get -y install python-virtualenv
if [ $? -eq 0 ]
then
    echo "######### Dependencies python-virtualenv is installed ###########"
else
    echo "######## Erro in installing python-virtualenv ########"
    
fi
#+END_SRC

   - Create emacs initialization file
#+BEGIN_SRC lisp :tangle ../src/dot-emacs.el
;; Full Screen
;;(setenv "PATH" (concat (getenv "PATH") "/home/travula/racket/bin/"))
;;(setq exec-path (append exec-path '("/home/travula/racket/bin/")))

(setq debug-on-error 1)
(setq max-lisp-eval-depth 2000)
(setq max-specpdl-size 6000)

(require 'cl)
(setq url-proxy-services '(("http" . "proxy.iiit.ac.in:8080")
                         ("https" . "proxy.iiit.ac.in:8080")))


(require 'package)

(add-to-list 'package-archives
            '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives 
             '("org" . "http://orgmode.org/elpa/") t)

;;(add-to-list 'package-archives
;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)


(package-initialize)


;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" system-name))

;; Load Path
;; ---------
;;; ((list )of pathname?) -> void?
(defun add-to-load-path (entries)
  (dolist (entry entries)
	 (add-to-list 'load-path entry)))

;;; Also highlight parens
(setq show-paren-delay 0
      show-paren-style 'parenthesis)
(show-paren-mode 1)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector ["#2e3436" "#a40000" "#4e9a06" "#c4a000" "#204a87" "#5c3566" "#729fcf" "#eeeeec"])
 '(column-number-mode t)
 '(custom-enabled-themes (quote (wheatgrass)))
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(quack-programs (quote ("mzscheme" "bigloo" "csi" "csi -hygienic" "gosh" "gracket" "gsi" "gsi ~~/syntax-case.scm -" "guile" "kawa" "mit-scheme" "racket" "racket -il typed/racket" "rs" "scheme" "scheme48" "scsh" "sisc" "stklos" "sxi")))
 '(show-paren-mode t))

(setq font-string 
;      "-*-Courier-medium-r-normal-*-18-*-*-*-m-*-iso8859-1"
;      "-*-Courier-medium-r-normal-*-24-*-*-*-m-*-iso8859-1"

;      "-*-Courier-bold-r-normal-*-12-*-*-*-m-*-iso8859-1"
;      "-*-Courier-bold-r-normal-*-18-*-*-*-m-*-iso8859-1" ;      not defined
      "-*-Courier-bold-r-normal-*-24-*-*-*-m-*-iso8859-1"
)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 158 :width normal)))))

;; Don't use TABS for indentations.
(setq-default indent-tabs-mode nil)

;; Set the number to the number of columns to use.
(setq-default fill-column 79)

;; Add Autofill mode to mode hooks.
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

;; Show line number in the mode line.
(line-number-mode 1)

;; Show column number in the mode line.
(column-number-mode 1)

;;Enable syntax highlighting. This will also highlight lines that form a
;;region.
(require 'font-lock)
(global-font-lock-mode 1)

;;;;org-mode configuration
;; Enable org-mode
(require 'org)
;; Make org-mode work with files ending in .org
;; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;; The above is the default in recent emacsen

;;;Indentation is automatically added. When a tab is pressed it is replaced
;;;with 4 spaces. When backspace is pressed on an empty line, the cursor will
;;;jump to the previous indentation level.


(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

(setq interpreter-mode-alist
      (cons '("python" . python-mode)
            interpreter-mode-alist)
      python-mode-hook
      '(lambda () (progn
                    (set-variable 'py-indent-offset 4)
                    (set-variable 'indent-tabs-mode nil))))

;; Highlight character at "fill-column" position.
(require 'column-marker)
(set-face-background 'column-marker-1 "red")
(add-hook 'python-mode-hook
          (lambda () (interactive)
            (column-marker-1 fill-column)))



;;; setting up python with flycheck
;;; http://dreamrunner.org/wiki/public_html/Python/flycheck-pylint-emacs-with-python.html
(defun flycheck-python-setup ()
  (flycheck-mode))
(add-hook 'python-mode-hook #'flycheck-python-setup)

;; Remove trailing whitespace manually by typing C-t C-w.
(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key (kbd "C-t C-w")
                           'delete-trailing-whitespace)))

;; Automatically remove trailing whitespace when file is saved.
(add-hook 'python-mode-hook
      (lambda()
        (add-hook 'local-write-file-hooks
              '(lambda()
                 (save-excursion
                   (delete-trailing-whitespace))))))

;; Use M-SPC (use ALT key) to make sure that words are separated by
;; just one space. Use C-x C-o to collapse a set of empty lines
;; around the cursor to one empty line. Useful for deleting all but
;; one blank line at end of file. To do this go to end of file (M->)
;; and type C-x C-o.


(setq org-src-preserve-indentation t)
(add-hook 'org-mode-hook
  (lambda()
    (flyspell-mode 1)))

(dolist (hook '(org-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq js2-highlight-level 3)
(setq js-indent-level 2)

;; auto complete for python
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:setup-keys t)                      ; optional
(setq jedi:complete-on-dot t)                 ; optional

;; open json files in js-mode
(add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
;;yasnippet (https://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs/)
(require 'yasnippet)
(yas-global-mode 1)
;;; auto complete mod
;;; should be loaded after yasnippet so that they can work together
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")


(require 'quack)
(setq scheme-program-name "mzscheme")
(setq racket-racket-program "mzscheme")

(load-library "ox-reveal")

;;; dired
;;; =====
(add-hook 'dired-load-hook
  (function 
    (lambda ()
      (setq dired-copy-preserve-time t)
      (setq dired-recursive-copies 'top)
      (setq dired-dwim-target t) ;
					; set dired-do-rename's
					; default
					; target to the
					; other window
      (define-key dired-mode-map "b" 'browse-url-of-dired-file)
      (load "dired-x")
      (define-key dired-mode-map "z" 'dired-remote-copy)
      (define-key dired-mode-map "r" 'rsync-se-101) 
      (define-key dired-mode-map "T" 'dired-trash-files)
      (define-key dired-mode-map "\C-ca" 'dired-acroread-file)
      )))

;;; span 

;;;  for adding spans to elements

;;; Now you can type links such as:

;;; Check out this [[span:special][text block]].
;;; Which generates HTML output like:

;;; <p>Check out this <span class="special">text block</span>.</p>

;;; https://korewanetadesu.com/org-mode-spans.html
(defun jw/html-escape-attribute (value)
  "Entity-escape VALUE and wrap it in quotes."
  ;; http://www.w3.org/TR/2009/WD-html5-20090212/serializing-html-fragments.html
  ;;
  ;; "Escaping a string... consists of replacing any occurrences of
  ;; the "&" character by the string "&amp;", any occurrences of the
  ;; U+00A0 NO-BREAK SPACE character by the string "&nbsp;", and, if
  ;; the algorithm was invoked in the attribute mode, any occurrences
  ;; of the """ character by the string "&quot;"..."
  (let* ((value (replace-regexp-in-string "&" "&amp;" value))
         (value (replace-regexp-in-string "\u00a0" "&nbsp;" value))
         (value (replace-regexp-in-string "\"" "&quot;" value)))
    value))


(eval-after-load "org"
  '(org-add-link-type
    "span" #'ignore ; not an 'openable' link
    #'(lambda (class desc format)
        (pcase format
          (`html (format "<span class=\"%s\">%s</span>"
                         (jw/html-escape-attribute class)
                         (or desc "")))
          (_ (or desc ""))))))

#+END_SRC

   - Copying =emacs= file to =~/.emacs=
#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
cp ./dot-emacs.el ~/.emacs
if [ $? -eq 0 ]
then
    echo "######### Successfully copied .emacs file ###########"
else
    echo "######## Erro in copying .emacs file ########"
    exit 1
fi
#+END_SRC

** Downloading =emacs24.5.10.tar.gz= file
   - Before we go ahead with installing emacs please download the emacs source
     file using =wget= command under =~/src= directory.
#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
mkdir -p ~/src
cd ~/src
wget http://ftp.gnu.org/gnu/emacs/emacs-24.5.tar.gz
if [ $? -eq 0 ]
then
    echo "######### emacs-24.5.tar.gz is downloaded ###########"
else
    echo "Error in downlaoding emacs-24.5.tar.gz file"
    exit 1
fi
#+END_SRC
** Installing emacs-24.5.10
   - To install =emacs-24.5.10= source package, untar the downloaded file and run =make=,
     =checkinstall= commands. 
#+BEGIN_SRC shell :tangle ../src/install_emacs.sh :eval no
tar xf emacs-24.5.tar.gz
cd emacs-24.5
./configure
make
sudo checkinstall
if [ $? -eq 0 ]
then
    echo "######### Successfully installed checkinstall ###########"
else
    echo "######## Error in running checkinstall ############"
    exit 1
fi

#+END_SRC

* Install the entire setup

  Following code will invoke both the =git= and =emacs= installation scripts.

#+BEGIN_SRC shell :tangle ../src/all.sh :eval no
#!/bin/bash
chmod +x install_git.sh
chmod +x install_emacs.sh
./install_git.sh
./install_emacs.sh
#+END_SRC
    
